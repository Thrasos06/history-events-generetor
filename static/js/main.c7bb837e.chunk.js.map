{"version":3,"sources":["Components/Pages/BirthEventCalculatorPage/BirthEventCalculator.jsx","Components/Pages/BirthEventCalculatorPage/BirthEventCalculatorPage.jsx","Components/Styles/MyGlobalStyles.jsx","App.js","reportWebVitals.js","index.js"],"names":["InputGroups","styled","BirthEventCalculator","setNewDaysArray","maxDays","newArray","Array","i","push","useState","activeMonth","setActiveMonth","activeDay","setActiveDay","robots","setRobots","daysList","setDaysList","ContainerForm","width","height","padding","backgroundColor","textAlign","fontFamily","fontSize","inputList","name","maxValue","monthsList","publish","fetch","then","response","text","createNewdaysList","console","log","setNewDaysListForSelectedMonth","target","targetMonthNum","parseInt","value","changeValue","renderOptions","item","listToRender","eval","map","key","renderInputs","input","className","htmlFor","id","onChange","onClick","href","Header","Footer","BirthEventCalculatorWrapper","backgroundImage","display","justifyContent","alignItems","BirthEventCalculatorPage","src","alt","MyGlobalStyles","styles","css","App","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7bb837e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst InputGroups = styled(\"div\")`\r\n    display: flex;\r\n    min-width: 340px;\r\n    width: 100%;\r\n    justify-content: space-around;\r\n    align-items: flex-end;\r\n    border-radius: 0px;\r\n    padding: 5px;\r\n\r\n    & > .form-group {\r\n        width: 100%;\r\n        height: 100%;\r\n\r\n        display: flex;\r\n        flex-direction: column;\r\n        /* margin-bottom: 20px; */\r\n\r\n        & > select {\r\n            height: 40px;\r\n            font-size: large;\r\n            font-weight: bold;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            text-indent: 10px;\r\n            cursor: pointer;\r\n            /* border: 5px solid red; */\r\n        }\r\n    }\r\n\r\n    & > #buttonClick {\r\n        min-width: 100px;\r\n        height: 38px;\r\n        /* border-radius: 4px; */\r\n        background-color: paleturquoise;\r\n        background-color: #fff;\r\n        background-color: #406060;\r\n        color: #fff;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        font-size: large;\r\n        font-weight: bold;\r\n        border: 1px solid #000;\r\n        /* border: 5px solid red; */\r\n        transition: 0.5s;\r\n        &:hover {\r\n            cursor: pointer;\r\n            background-color: #507070;\r\n        }\r\n    }\r\n`;\r\n\r\nconst BirthEventCalculator = () => {\r\n    const setNewDaysArray = (maxDays) => {\r\n        let newArray = new Array();\r\n        for (let i = 1; i <= maxDays; i++) {\r\n            newArray.push(i);\r\n        }\r\n        return newArray;\r\n    };\r\n\r\n    const [activeMonth, setActiveMonth] = useState(0);\r\n    const [activeDay, setActiveDay] = useState(0);\r\n    const [robots, setRobots] = useState(\"\");\r\n    const [daysList, setDaysList] = useState(setNewDaysArray(31));\r\n\r\n    const ContainerForm = styled(\"div\")({\r\n        width: robots === \"\" ? \"390px\" : \"810px\",\r\n        height: robots === \"\" ? \"200px\" : \"300px\",\r\n        /* margin: auto; */\r\n        padding: \"20px\",\r\n        backgroundColor: \"#fff\",\r\n        /* height: 50px; */\r\n        /* text-align: center; */\r\n\r\n        \"& h3\": {\r\n            textAlign: \"center\",\r\n        },\r\n\r\n        \"& > #theEvent\": {\r\n            fontFamily: \"MyFont\",\r\n            fontSize: \"x-large\",\r\n            textAlign: \"center\",\r\n        },\r\n    });\r\n\r\n    const inputList = [\r\n        {\r\n            name: \"Month\",\r\n            maxValue: \"12\",\r\n        },\r\n        {\r\n            name: \"Day\",\r\n            maxValue: \"31\",\r\n        },\r\n    ];\r\n\r\n    const monthsList = [\r\n        \"January\",\r\n        \"February\",\r\n        \"March\",\r\n        \"April\",\r\n        \"May\",\r\n        \"June\",\r\n        \"July\",\r\n        \"August\",\r\n        \"September\",\r\n        \"October\",\r\n        \"November\",\r\n        \"December\",\r\n    ];\r\n\r\n    const publish = () => {\r\n        fetch(`https://numbersapi.com/${activeMonth + 1}/${activeDay + 1}/date`)\r\n            .then((response) => response.text())\r\n            .then((text) => setRobots(text));\r\n\r\n        // window.open(`http://numbersapi.com/${this.state.month}/${this.state.day}/date`);\r\n        // this.Brings();\r\n    };\r\n\r\n    const createNewdaysList = (maxDays = 30) => {\r\n        let newArray = new Array();\r\n        for (let i = 0; i < maxDays; i++) {\r\n            newArray.push(i + 1);\r\n        }\r\n        console.log(newArray);\r\n        setDaysList(newArray);\r\n        return newArray;\r\n    };\r\n\r\n    const setNewDaysListForSelectedMonth = (target) => {\r\n        let maxDays = 0;\r\n        let targetMonthNum = parseInt(target.value) + 1;\r\n        targetMonthNum <= 7\r\n            ? targetMonthNum % 2 === 0\r\n                ? targetMonthNum === 2\r\n                    ? (maxDays = 28)\r\n                    : (maxDays = 30)\r\n                : (maxDays = 31)\r\n            : targetMonthNum % 2 === 0\r\n            ? (maxDays = 31)\r\n            : (maxDays = 30);\r\n        createNewdaysList(maxDays);\r\n    };\r\n\r\n    const changeValue = ({ target }) => {\r\n        switch (target.name) {\r\n            case \"Month\":\r\n                setActiveMonth(parseInt(target.value));\r\n                setNewDaysListForSelectedMonth(target);\r\n                setActiveDay(0);\r\n                return null;\r\n            case \"Day\":\r\n                setActiveDay(parseInt(target.value));\r\n                return null;\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    const renderOptions = (item) => {\r\n        let listToRender = item === \"Month\" ? \"monthsList\" : \"daysList\";\r\n        listToRender = eval(listToRender);\r\n        console.log(\"listToRender\", listToRender);\r\n        return listToRender.map((item, key) => (\r\n            <option key={key} value={key}>\r\n                {listToRender[key]}\r\n            </option>\r\n        ));\r\n    };\r\n\r\n    const renderInputs = () => {\r\n        return (\r\n            <>\r\n                {inputList.map((input, key) => {\r\n                    return (\r\n                        <div className=\"form-group\" key={input.name}>\r\n                            <label htmlFor={input.name}>{input.name}</label>\r\n                            <select\r\n                                name={input.name}\r\n                                id={input.name}\r\n                                className=\"inputForm\"\r\n                                value={\r\n                                    input.name === \"Month\"\r\n                                        ? activeMonth\r\n                                        : activeDay\r\n                                }\r\n                                onChange={changeValue}\r\n                            >\r\n                                {renderOptions(input.name)}\r\n                            </select>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ContainerForm>\r\n                <h3>Enter Your Birth Date!</h3>\r\n                <InputGroups>\r\n                    {renderInputs(activeDay, activeMonth, changeValue)}\r\n                    <a\r\n                        className=\"form-group\"\r\n                        id=\"buttonClick\"\r\n                        value=\"Send\"\r\n                        onClick={publish}\r\n                        href\r\n                    >\r\n                        {robots === \"\" ? \"Lets Learn!\" : \"Find Another!!\"}\r\n                    </a>\r\n                </InputGroups>\r\n                <div id=\"theEvent\">\r\n                    <p>{robots}</p>\r\n                </div>\r\n            </ContainerForm>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BirthEventCalculator;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport BirthEventCalculator from \"./BirthEventCalculator\";\r\n\r\nconst Header = styled(\"div\")`\r\n    width: 100%;\r\n    max-height: 30vh;\r\n    text-align: center;\r\n    background-color: #303841;\r\n    /* height: 10vh; */\r\n    & > img {\r\n        /* height: 30vh; */\r\n        max-width: inherit;\r\n        max-height: inherit;\r\n        /* margin: 0 auto; */\r\n    }\r\n`;\r\n\r\nconst Footer = styled(\"footer\")`\r\n    position: fixed;\r\n    left: 0;\r\n    bottom: 0;\r\n    width: 100%;\r\n    height: 6vh;\r\n    background-color: rgb(44, 10, 99);\r\n    background-color: #303841;\r\n    box-shadow: purple;\r\n    color: white;\r\n    font-weight: bold;\r\n    /* text-align: center; */\r\n    & #content {\r\n        height: inherit;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        & a {\r\n            text-decoration: none;\r\n            color: red;\r\n        }\r\n    }\r\n`;\r\n\r\nconst BirthEventCalculatorWrapper = styled(\"div\")({\r\n    // backgroundColor: \"#345\",\r\n    backgroundImage: \"linear-gradient(#303841,#406060)\",\r\n\r\n    // width: \"100%\",\r\n    height: \"60vh\",\r\n    padding: \"20px\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n});\r\n\r\nconst BirthEventCalculatorPage = () => {\r\n    return (\r\n        <>\r\n            <Header>\r\n                <img src=\"./images/logo-mini.png\" alt=\"logo\" />\r\n            </Header>\r\n            <BirthEventCalculatorWrapper>\r\n                <BirthEventCalculator />\r\n            </BirthEventCalculatorWrapper>\r\n            <Footer>\r\n                <div id=\"content\">\r\n                    <p>\r\n                        Made for fun by&nbsp;\r\n                        <a href=\"https://github.com/Thrasos06\">Thrasos!</a>\r\n                    </p>\r\n                </div>\r\n            </Footer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BirthEventCalculatorPage;\r\n","import React from \"react\";\r\nimport { Global, css } from \"@emotion/react\";\r\n\r\nfunction MyGlobalStyles() {\r\n    return (\r\n        <Global\r\n            styles={css`\r\n                * {\r\n                    /* box-sizing: border-box; */\r\n                    font-family: MyFont;\r\n                    /* font-weight: bold; */\r\n                    /* font-size: x-large; */\r\n                }\r\n            `}\r\n        />\r\n    );\r\n}\r\n\r\nexport default MyGlobalStyles;\r\n","import React from \"react\";\r\nimport BirthEventCalculatorPage from \"./Components/Pages/BirthEventCalculatorPage/BirthEventCalculatorPage\";\r\nimport MyGlobalStyles from \"./Components/Styles/MyGlobalStyles\";\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <MyGlobalStyles />\r\n                <BirthEventCalculatorPage />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './index.css';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}